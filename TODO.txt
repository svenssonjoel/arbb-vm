
Short term TODO items
---------------------
* DONE Implement limited Fold functionality  in ArBB back-end
* Fix strange behaviour in corner case of reduce 1D to 0D 
   - figure out why ArBB allows output of reduction to be a Dense when 
     it should be a Scalar (1D -> 0D case) 
* Code cleanup 
* Bug hunting (some are starting to surface) 
    - reverse of env in genExp (a hack)
* Make debug output easy to toggle on or off (it is now off) 
* Run some simple benchmarks
    - SAXPY
    - DotProd 
    - Matrix Add (Should also be possible) 
* is_remote: 
    The meaning of this argument to begin_function is supposed to be
      - True -> This function can be called by execute 
      - False -> This functiona cal be called using call (from within a function)





Long term TODO items 
--------------------
* The "Partner" arrays allocated on Haskell side should be allocated 
  of minimum size!

* Implement more complete Fold functionality in ArBB back-end
    - Fold using function f 

* Expand Accelerate ArBB back-end functionality beyond map, zipwith, fold
  - Permutations 
  - scans 
 
* Reference counting on arrays managed in the back-end
   - Free arrays when possible 
* Generalize genBFun and genMap (They are the same concept, should be fused) 
* Investigate if "uploading" data at "Use" points is a good idea.
    Doing so imposes a restriction on dimensionality already at that point.
* Work on a "non-immediate" mode ArBB back-end 
    - generate larger functions and give the ArBB optimization passes more 
      to work on.  
* Different ArBB Kernels can be used depending on runtime knowledge, such as 
  size, shape.    

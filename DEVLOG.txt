

[2011.02.11] {Log started}

Joel and I talked about issues having to do with managing pointers to
ArBB garbage collected data, which uses reference counting.  Haskell
ForeignPtr's could, in their finalizer, call a reference count
decrement function on the ArBB side if that is necessary.



[2011:02:15] 

Entry by Joel Svensson: 
Swapped out the files that were in the repo for a new attempt. 
This version uses an alternative header file called arbb_alt.h 
(I placed that in cbits, it is now the only thing in cbits). 
With this approach the wrappers are nolonger needed.  
arbb_alt.h simply gives alternative type signatures to all the 
calls available in the arbb vm.
If the original arbb-vmapi.h header specifies a struct containing 
a pointer to void, the alternative says just pointer to void. 


[2011:03:10]
Running time measurements
our own reduction by repeated halving
number of elements are 2^24 ( The body of the reduction kernel spins 1024 times)

#CORES     DECOMP_DEGREE    TIME 
1                1           2.749683s
2                2           1.485693s
3                3           1.063253s
4                4           0.648853s
5                5           0.621373s
6                6           0.519923s
7                7           0.507538s
8                8           0.446125s

different decomp 
#CORES     DECOMP_DEGREE    TIME 
1                2           1.961878s
2                4           1.473037s 
3                6           0.978863s
4                8           0.649631s
5                10          0.654983s
6                12          0.531122s
7                14          0.525185s
8                16          0.440863s 

(These values are not averages over thousands of executions. 
 Just the value I pulled from "one" execution) 

With the simple add function in comparison to arbb_add_reduce

OUR OWN:    0.263479s
BUILT IN:   0.015299s
(2^24 elements summed up)


[2011.04.07] {Weird behavior from blackscholes test today}

Strange rebuilding effect.  Joel & I just ran blackscholes of 1M and
found it to take 15 seconds on vs-lin64-9 (no ARBB_* variables set).
Then doing a full rebuild brought it to 0.24 seconsd.

Increasing to 12.8 million for comparison.  That caused us to observe
the power-of-two effect where generating/zipping data (on vs 9) jumped
from 4s/1s to 54s/14s.

Here we are timing a hack that cuts down the Blackscholes kernel to
not get the 8X code duplication:

     [rrnewton@vs-lin64-9 ~/arbb-vm/accelerate/tests/ArBB/BlackScholes] $ ./Main 12800000
     Generating input data...
     Done generating input data: 54.792426s
     Zip stage took: 14.216404s
     (18.226551,74.53485,1.8865415)
     (8.828712,24.428644,0.5641718)
     Running hacked version
	Recording AST for hacked version...
     Running normal version
       Recording AST for normal version...
     Time ArBB (hacked): 0.44888s
     Time ArBB : 0.96046s

4 cores:
   Time ArBB (hacked): 0.328082s
   Time ArBB : 0.562035s

8 cores, e.g. "ARBB_OPT_LEVEL=o3 ARBB_NUM_CORES=8 ./Main 12800000" :
   Time ArBB (hacked): 0.24934s
   Time ArBB : 0.515408s
   


For comparison, the ArBB/C++:

    $ ARBB_OPT_LEVEL=o3 ARBB_NUM_CORES=  ./black-scholes 
    Num of Runs: 1
    Num of Options: 12800000
    Errors: 0/12800000
    Errors: 0/12800000
    ----------------------------------------
       Version      Time(s)  Speed Up
	     C     1.447279  1.000           
	 ArBB1     0.095563  15.145          
	 ArBB2     0.052681  27.473          
    ----------------------------------------
    Test finished





When we try to get the ArBB/C++ version working:

  * We find that both the dbg_ and opt_ versions (libarbb_dev and
    libarbb) obey the combination of ARBB_OPT_LEVEL=o3 and  ARBB_NUM_CORES





--------------------------------------------------------------------------------
List of problems encountered with ArBB:

  * "O3" is mentioned in documentation


List of problems encountered with Haskell / Accelerate:

  * We had some unexplained problems where rebuilding would create a
    large performance effect.
  * Accelerate's fromList is broken (quadratic)
  * 


  * Power of two effect in GHC.Prim.newPinnedByteArray 
    Sometimes non-powers-of two take enormously more time.



------------------------------------------------------------------------------

May-12-2011:

New version of ArBB available. I (BJS) started to make our bindings 
compatible with this version. (Now the examples compile under the 
new arBB version) 

